{
  "version": 3,
  "sources": ["../../@mozilla/readability/Readability.js", "../../@mozilla/readability/Readability-readerable.js", "../../@mozilla/readability/index.js"],
  "sourcesContent": ["/*\n * Copyright (c) 2010 Arc90 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * This code is heavily based on Arc90's readability.js (1.7.1) script\n * available at: http://code.google.com/p/arc90labs-readability\n */\n\n/**\n * Public constructor.\n * @param {HTMLDocument} doc     The document to parse.\n * @param {Object}       options The options object.\n */\nfunction Readability(doc, options) {\n  // In some older versions, people passed a URI as the first argument. Cope:\n  if (options && options.documentElement) {\n    doc = options;\n    options = arguments[2];\n  } else if (!doc || !doc.documentElement) {\n    throw new Error(\n      \"First argument to Readability constructor should be a document object.\"\n    );\n  }\n  options = options || {};\n\n  this._doc = doc;\n  this._docJSDOMParser = this._doc.firstChild.__JSDOMParser__;\n  this._articleTitle = null;\n  this._articleByline = null;\n  this._articleDir = null;\n  this._articleSiteName = null;\n  this._attempts = [];\n  this._metadata = {};\n\n  // Configurable options\n  this._debug = !!options.debug;\n  this._maxElemsToParse =\n    options.maxElemsToParse || this.DEFAULT_MAX_ELEMS_TO_PARSE;\n  this._nbTopCandidates =\n    options.nbTopCandidates || this.DEFAULT_N_TOP_CANDIDATES;\n  this._charThreshold = options.charThreshold || this.DEFAULT_CHAR_THRESHOLD;\n  this._classesToPreserve = this.CLASSES_TO_PRESERVE.concat(\n    options.classesToPreserve || []\n  );\n  this._keepClasses = !!options.keepClasses;\n  this._serializer =\n    options.serializer ||\n    function (el) {\n      return el.innerHTML;\n    };\n  this._disableJSONLD = !!options.disableJSONLD;\n  this._allowedVideoRegex = options.allowedVideoRegex || this.REGEXPS.videos;\n  this._linkDensityModifier = options.linkDensityModifier || 0;\n\n  // Start with all flags set\n  this._flags =\n    this.FLAG_STRIP_UNLIKELYS |\n    this.FLAG_WEIGHT_CLASSES |\n    this.FLAG_CLEAN_CONDITIONALLY;\n\n  // Control whether log messages are sent to the console\n  if (this._debug) {\n    let logNode = function (node) {\n      if (node.nodeType == node.TEXT_NODE) {\n        return `${node.nodeName} (\"${node.textContent}\")`;\n      }\n      let attrPairs = Array.from(node.attributes || [], function (attr) {\n        return `${attr.name}=\"${attr.value}\"`;\n      }).join(\" \");\n      return `<${node.localName} ${attrPairs}>`;\n    };\n    this.log = function () {\n      if (typeof console !== \"undefined\") {\n        let args = Array.from(arguments, arg => {\n          if (arg && arg.nodeType == this.ELEMENT_NODE) {\n            return logNode(arg);\n          }\n          return arg;\n        });\n        args.unshift(\"Reader: (Readability)\");\n        // eslint-disable-next-line no-console\n        console.log(...args);\n      } else if (typeof dump !== \"undefined\") {\n        /* global dump */\n        var msg = Array.prototype.map\n          .call(arguments, function (x) {\n            return x && x.nodeName ? logNode(x) : x;\n          })\n          .join(\" \");\n        dump(\"Reader: (Readability) \" + msg + \"\\n\");\n      }\n    };\n  } else {\n    this.log = function () {};\n  }\n}\n\nReadability.prototype = {\n  FLAG_STRIP_UNLIKELYS: 0x1,\n  FLAG_WEIGHT_CLASSES: 0x2,\n  FLAG_CLEAN_CONDITIONALLY: 0x4,\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\n  ELEMENT_NODE: 1,\n  TEXT_NODE: 3,\n\n  // Max number of nodes supported by this parser. Default: 0 (no limit)\n  DEFAULT_MAX_ELEMS_TO_PARSE: 0,\n\n  // The number of top candidates to consider when analysing how\n  // tight the competition is among candidates.\n  DEFAULT_N_TOP_CANDIDATES: 5,\n\n  // Element tags to score by default.\n  DEFAULT_TAGS_TO_SCORE: \"section,h2,h3,h4,h5,h6,p,td,pre\"\n    .toUpperCase()\n    .split(\",\"),\n\n  // The default number of chars an article must have in order to return a result\n  DEFAULT_CHAR_THRESHOLD: 500,\n\n  // All of the regular expressions in use within readability.\n  // Defined up here so we don't instantiate them repeatedly in loops.\n  REGEXPS: {\n    // NOTE: These two regular expressions are duplicated in\n    // Readability-readerable.js. Please keep both copies in sync.\n    unlikelyCandidates:\n      /-ad-|ai2html|banner|breadcrumbs|combx|comment|community|cover-wrap|disqus|extra|footer|gdpr|header|legends|menu|related|remark|replies|rss|shoutbox|sidebar|skyscraper|social|sponsor|supplemental|ad-break|agegate|pagination|pager|popup|yom-remote/i,\n    okMaybeItsACandidate: /and|article|body|column|content|main|shadow/i,\n\n    positive:\n      /article|body|content|entry|hentry|h-entry|main|page|pagination|post|text|blog|story/i,\n    negative:\n      /-ad-|hidden|^hid$| hid$| hid |^hid |banner|combx|comment|com-|contact|footer|gdpr|masthead|media|meta|outbrain|promo|related|scroll|share|shoutbox|sidebar|skyscraper|sponsor|shopping|tags|widget/i,\n    extraneous:\n      /print|archive|comment|discuss|e[\\-]?mail|share|reply|all|login|sign|single|utility/i,\n    byline: /byline|author|dateline|writtenby|p-author/i,\n    replaceFonts: /<(\\/?)font[^>]*>/gi,\n    normalize: /\\s{2,}/g,\n    videos:\n      /\\/\\/(www\\.)?((dailymotion|youtube|youtube-nocookie|player\\.vimeo|v\\.qq)\\.com|(archive|upload\\.wikimedia)\\.org|player\\.twitch\\.tv)/i,\n    shareElements: /(\\b|_)(share|sharedaddy)(\\b|_)/i,\n    nextLink: /(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))/i,\n    prevLink: /(prev|earl|old|new|<|«)/i,\n    tokenize: /\\W+/g,\n    whitespace: /^\\s*$/,\n    hasContent: /\\S$/,\n    hashUrl: /^#.+/,\n    srcsetUrl: /(\\S+)(\\s+[\\d.]+[xw])?(\\s*(?:,|$))/g,\n    b64DataUrl: /^data:\\s*([^\\s;,]+)\\s*;\\s*base64\\s*,/i,\n    // Commas as used in Latin, Sindhi, Chinese and various other scripts.\n    // see: https://en.wikipedia.org/wiki/Comma#Comma_variants\n    commas: /\\u002C|\\u060C|\\uFE50|\\uFE10|\\uFE11|\\u2E41|\\u2E34|\\u2E32|\\uFF0C/g,\n    // See: https://schema.org/Article\n    jsonLdArticleTypes:\n      /^Article|AdvertiserContentArticle|NewsArticle|AnalysisNewsArticle|AskPublicNewsArticle|BackgroundNewsArticle|OpinionNewsArticle|ReportageNewsArticle|ReviewNewsArticle|Report|SatiricalArticle|ScholarlyArticle|MedicalScholarlyArticle|SocialMediaPosting|BlogPosting|LiveBlogPosting|DiscussionForumPosting|TechArticle|APIReference$/,\n    // used to see if a node's content matches words commonly used for ad blocks or loading indicators\n    adWords:\n      /^(ad(vertising|vertisement)?|pub(licité)?|werb(ung)?|广告|Реклама|Anuncio)$/iu,\n    loadingWords:\n      /^((loading|正在加载|Загрузка|chargement|cargando)(…|\\.\\.\\.)?)$/iu,\n  },\n\n  UNLIKELY_ROLES: [\n    \"menu\",\n    \"menubar\",\n    \"complementary\",\n    \"navigation\",\n    \"alert\",\n    \"alertdialog\",\n    \"dialog\",\n  ],\n\n  DIV_TO_P_ELEMS: new Set([\n    \"BLOCKQUOTE\",\n    \"DL\",\n    \"DIV\",\n    \"IMG\",\n    \"OL\",\n    \"P\",\n    \"PRE\",\n    \"TABLE\",\n    \"UL\",\n  ]),\n\n  ALTER_TO_DIV_EXCEPTIONS: [\"DIV\", \"ARTICLE\", \"SECTION\", \"P\", \"OL\", \"UL\"],\n\n  PRESENTATIONAL_ATTRIBUTES: [\n    \"align\",\n    \"background\",\n    \"bgcolor\",\n    \"border\",\n    \"cellpadding\",\n    \"cellspacing\",\n    \"frame\",\n    \"hspace\",\n    \"rules\",\n    \"style\",\n    \"valign\",\n    \"vspace\",\n  ],\n\n  DEPRECATED_SIZE_ATTRIBUTE_ELEMS: [\"TABLE\", \"TH\", \"TD\", \"HR\", \"PRE\"],\n\n  // The commented out elements qualify as phrasing content but tend to be\n  // removed by readability when put into paragraphs, so we ignore them here.\n  PHRASING_ELEMS: [\n    // \"CANVAS\", \"IFRAME\", \"SVG\", \"VIDEO\",\n    \"ABBR\",\n    \"AUDIO\",\n    \"B\",\n    \"BDO\",\n    \"BR\",\n    \"BUTTON\",\n    \"CITE\",\n    \"CODE\",\n    \"DATA\",\n    \"DATALIST\",\n    \"DFN\",\n    \"EM\",\n    \"EMBED\",\n    \"I\",\n    \"IMG\",\n    \"INPUT\",\n    \"KBD\",\n    \"LABEL\",\n    \"MARK\",\n    \"MATH\",\n    \"METER\",\n    \"NOSCRIPT\",\n    \"OBJECT\",\n    \"OUTPUT\",\n    \"PROGRESS\",\n    \"Q\",\n    \"RUBY\",\n    \"SAMP\",\n    \"SCRIPT\",\n    \"SELECT\",\n    \"SMALL\",\n    \"SPAN\",\n    \"STRONG\",\n    \"SUB\",\n    \"SUP\",\n    \"TEXTAREA\",\n    \"TIME\",\n    \"VAR\",\n    \"WBR\",\n  ],\n\n  // These are the classes that readability sets itself.\n  CLASSES_TO_PRESERVE: [\"page\"],\n\n  // These are the list of HTML entities that need to be escaped.\n  HTML_ESCAPE_MAP: {\n    lt: \"<\",\n    gt: \">\",\n    amp: \"&\",\n    quot: '\"',\n    apos: \"'\",\n  },\n\n  /**\n   * Run any post-process modifications to article content as necessary.\n   *\n   * @param Element\n   * @return void\n   **/\n  _postProcessContent(articleContent) {\n    // Readability cannot open relative uris so we convert them to absolute uris.\n    this._fixRelativeUris(articleContent);\n\n    this._simplifyNestedElements(articleContent);\n\n    if (!this._keepClasses) {\n      // Remove classes.\n      this._cleanClasses(articleContent);\n    }\n  },\n\n  /**\n   * Iterates over a NodeList, calls `filterFn` for each node and removes node\n   * if function returned `true`.\n   *\n   * If function is not passed, removes all the nodes in node list.\n   *\n   * @param NodeList nodeList The nodes to operate on\n   * @param Function filterFn the function to use as a filter\n   * @return void\n   */\n  _removeNodes(nodeList, filterFn) {\n    // Avoid ever operating on live node lists.\n    if (this._docJSDOMParser && nodeList._isLiveNodeList) {\n      throw new Error(\"Do not pass live node lists to _removeNodes\");\n    }\n    for (var i = nodeList.length - 1; i >= 0; i--) {\n      var node = nodeList[i];\n      var parentNode = node.parentNode;\n      if (parentNode) {\n        if (!filterFn || filterFn.call(this, node, i, nodeList)) {\n          parentNode.removeChild(node);\n        }\n      }\n    }\n  },\n\n  /**\n   * Iterates over a NodeList, and calls _setNodeTag for each node.\n   *\n   * @param NodeList nodeList The nodes to operate on\n   * @param String newTagName the new tag name to use\n   * @return void\n   */\n  _replaceNodeTags(nodeList, newTagName) {\n    // Avoid ever operating on live node lists.\n    if (this._docJSDOMParser && nodeList._isLiveNodeList) {\n      throw new Error(\"Do not pass live node lists to _replaceNodeTags\");\n    }\n    for (const node of nodeList) {\n      this._setNodeTag(node, newTagName);\n    }\n  },\n\n  /**\n   * Iterate over a NodeList, which doesn't natively fully implement the Array\n   * interface.\n   *\n   * For convenience, the current object context is applied to the provided\n   * iterate function.\n   *\n   * @param  NodeList nodeList The NodeList.\n   * @param  Function fn       The iterate function.\n   * @return void\n   */\n  _forEachNode(nodeList, fn) {\n    Array.prototype.forEach.call(nodeList, fn, this);\n  },\n\n  /**\n   * Iterate over a NodeList, and return the first node that passes\n   * the supplied test function\n   *\n   * For convenience, the current object context is applied to the provided\n   * test function.\n   *\n   * @param  NodeList nodeList The NodeList.\n   * @param  Function fn       The test function.\n   * @return void\n   */\n  _findNode(nodeList, fn) {\n    return Array.prototype.find.call(nodeList, fn, this);\n  },\n\n  /**\n   * Iterate over a NodeList, return true if any of the provided iterate\n   * function calls returns true, false otherwise.\n   *\n   * For convenience, the current object context is applied to the\n   * provided iterate function.\n   *\n   * @param  NodeList nodeList The NodeList.\n   * @param  Function fn       The iterate function.\n   * @return Boolean\n   */\n  _someNode(nodeList, fn) {\n    return Array.prototype.some.call(nodeList, fn, this);\n  },\n\n  /**\n   * Iterate over a NodeList, return true if all of the provided iterate\n   * function calls return true, false otherwise.\n   *\n   * For convenience, the current object context is applied to the\n   * provided iterate function.\n   *\n   * @param  NodeList nodeList The NodeList.\n   * @param  Function fn       The iterate function.\n   * @return Boolean\n   */\n  _everyNode(nodeList, fn) {\n    return Array.prototype.every.call(nodeList, fn, this);\n  },\n\n  _getAllNodesWithTag(node, tagNames) {\n    if (node.querySelectorAll) {\n      return node.querySelectorAll(tagNames.join(\",\"));\n    }\n    return [].concat.apply(\n      [],\n      tagNames.map(function (tag) {\n        var collection = node.getElementsByTagName(tag);\n        return Array.isArray(collection) ? collection : Array.from(collection);\n      })\n    );\n  },\n\n  /**\n   * Removes the class=\"\" attribute from every element in the given\n   * subtree, except those that match CLASSES_TO_PRESERVE and\n   * the classesToPreserve array from the options object.\n   *\n   * @param Element\n   * @return void\n   */\n  _cleanClasses(node) {\n    var classesToPreserve = this._classesToPreserve;\n    var className = (node.getAttribute(\"class\") || \"\")\n      .split(/\\s+/)\n      .filter(cls => classesToPreserve.includes(cls))\n      .join(\" \");\n\n    if (className) {\n      node.setAttribute(\"class\", className);\n    } else {\n      node.removeAttribute(\"class\");\n    }\n\n    for (node = node.firstElementChild; node; node = node.nextElementSibling) {\n      this._cleanClasses(node);\n    }\n  },\n\n  /**\n   * Tests whether a string is a URL or not.\n   *\n   * @param {string} str The string to test\n   * @return {boolean} true if str is a URL, false if not\n   */\n  _isUrl(str) {\n    try {\n      new URL(str);\n      return true;\n    } catch {\n      return false;\n    }\n  },\n  /**\n   * Converts each <a> and <img> uri in the given element to an absolute URI,\n   * ignoring #ref URIs.\n   *\n   * @param Element\n   * @return void\n   */\n  _fixRelativeUris(articleContent) {\n    var baseURI = this._doc.baseURI;\n    var documentURI = this._doc.documentURI;\n    function toAbsoluteURI(uri) {\n      // Leave hash links alone if the base URI matches the document URI:\n      if (baseURI == documentURI && uri.charAt(0) == \"#\") {\n        return uri;\n      }\n\n      // Otherwise, resolve against base URI:\n      try {\n        return new URL(uri, baseURI).href;\n      } catch (ex) {\n        // Something went wrong, just return the original:\n      }\n      return uri;\n    }\n\n    var links = this._getAllNodesWithTag(articleContent, [\"a\"]);\n    this._forEachNode(links, function (link) {\n      var href = link.getAttribute(\"href\");\n      if (href) {\n        // Remove links with javascript: URIs, since\n        // they won't work after scripts have been removed from the page.\n        if (href.indexOf(\"javascript:\") === 0) {\n          // if the link only contains simple text content, it can be converted to a text node\n          if (\n            link.childNodes.length === 1 &&\n            link.childNodes[0].nodeType === this.TEXT_NODE\n          ) {\n            var text = this._doc.createTextNode(link.textContent);\n            link.parentNode.replaceChild(text, link);\n          } else {\n            // if the link has multiple children, they should all be preserved\n            var container = this._doc.createElement(\"span\");\n            while (link.firstChild) {\n              container.appendChild(link.firstChild);\n            }\n            link.parentNode.replaceChild(container, link);\n          }\n        } else {\n          link.setAttribute(\"href\", toAbsoluteURI(href));\n        }\n      }\n    });\n\n    var medias = this._getAllNodesWithTag(articleContent, [\n      \"img\",\n      \"picture\",\n      \"figure\",\n      \"video\",\n      \"audio\",\n      \"source\",\n    ]);\n\n    this._forEachNode(medias, function (media) {\n      var src = media.getAttribute(\"src\");\n      var poster = media.getAttribute(\"poster\");\n      var srcset = media.getAttribute(\"srcset\");\n\n      if (src) {\n        media.setAttribute(\"src\", toAbsoluteURI(src));\n      }\n\n      if (poster) {\n        media.setAttribute(\"poster\", toAbsoluteURI(poster));\n      }\n\n      if (srcset) {\n        var newSrcset = srcset.replace(\n          this.REGEXPS.srcsetUrl,\n          function (_, p1, p2, p3) {\n            return toAbsoluteURI(p1) + (p2 || \"\") + p3;\n          }\n        );\n\n        media.setAttribute(\"srcset\", newSrcset);\n      }\n    });\n  },\n\n  _simplifyNestedElements(articleContent) {\n    var node = articleContent;\n\n    while (node) {\n      if (\n        node.parentNode &&\n        [\"DIV\", \"SECTION\"].includes(node.tagName) &&\n        !(node.id && node.id.startsWith(\"readability\"))\n      ) {\n        if (this._isElementWithoutContent(node)) {\n          node = this._removeAndGetNext(node);\n          continue;\n        } else if (\n          this._hasSingleTagInsideElement(node, \"DIV\") ||\n          this._hasSingleTagInsideElement(node, \"SECTION\")\n        ) {\n          var child = node.children[0];\n          for (var i = 0; i < node.attributes.length; i++) {\n            child.setAttributeNode(node.attributes[i].cloneNode());\n          }\n          node.parentNode.replaceChild(child, node);\n          node = child;\n          continue;\n        }\n      }\n\n      node = this._getNextNode(node);\n    }\n  },\n\n  /**\n   * Get the article title as an H1.\n   *\n   * @return string\n   **/\n  _getArticleTitle() {\n    var doc = this._doc;\n    var curTitle = \"\";\n    var origTitle = \"\";\n\n    try {\n      curTitle = origTitle = doc.title.trim();\n\n      // If they had an element with id \"title\" in their HTML\n      if (typeof curTitle !== \"string\") {\n        curTitle = origTitle = this._getInnerText(\n          doc.getElementsByTagName(\"title\")[0]\n        );\n      }\n    } catch (e) {\n      /* ignore exceptions setting the title. */\n    }\n\n    var titleHadHierarchicalSeparators = false;\n    function wordCount(str) {\n      return str.split(/\\s+/).length;\n    }\n\n    // If there's a separator in the title, first remove the final part\n    if (/ [\\|\\-\\\\\\/>»] /.test(curTitle)) {\n      titleHadHierarchicalSeparators = / [\\\\\\/>»] /.test(curTitle);\n      let allSeparators = Array.from(origTitle.matchAll(/ [\\|\\-\\\\\\/>»] /gi));\n      curTitle = origTitle.substring(0, allSeparators.pop().index);\n\n      // If the resulting title is too short, remove the first part instead:\n      if (wordCount(curTitle) < 3) {\n        curTitle = origTitle.replace(/^[^\\|\\-\\\\\\/>»]*[\\|\\-\\\\\\/>»]/gi, \"\");\n      }\n    } else if (curTitle.includes(\": \")) {\n      // Check if we have an heading containing this exact string, so we\n      // could assume it's the full title.\n      var headings = this._getAllNodesWithTag(doc, [\"h1\", \"h2\"]);\n      var trimmedTitle = curTitle.trim();\n      var match = this._someNode(headings, function (heading) {\n        return heading.textContent.trim() === trimmedTitle;\n      });\n\n      // If we don't, let's extract the title out of the original title string.\n      if (!match) {\n        curTitle = origTitle.substring(origTitle.lastIndexOf(\":\") + 1);\n\n        // If the title is now too short, try the first colon instead:\n        if (wordCount(curTitle) < 3) {\n          curTitle = origTitle.substring(origTitle.indexOf(\":\") + 1);\n          // But if we have too many words before the colon there's something weird\n          // with the titles and the H tags so let's just use the original title instead\n        } else if (wordCount(origTitle.substr(0, origTitle.indexOf(\":\"))) > 5) {\n          curTitle = origTitle;\n        }\n      }\n    } else if (curTitle.length > 150 || curTitle.length < 15) {\n      var hOnes = doc.getElementsByTagName(\"h1\");\n\n      if (hOnes.length === 1) {\n        curTitle = this._getInnerText(hOnes[0]);\n      }\n    }\n\n    curTitle = curTitle.trim().replace(this.REGEXPS.normalize, \" \");\n    // If we now have 4 words or fewer as our title, and either no\n    // 'hierarchical' separators (\\, /, > or ») were found in the original\n    // title or we decreased the number of words by more than 1 word, use\n    // the original title.\n    var curTitleWordCount = wordCount(curTitle);\n    if (\n      curTitleWordCount <= 4 &&\n      (!titleHadHierarchicalSeparators ||\n        curTitleWordCount !=\n          wordCount(origTitle.replace(/[\\|\\-\\\\\\/>»]+/g, \"\")) - 1)\n    ) {\n      curTitle = origTitle;\n    }\n\n    return curTitle;\n  },\n\n  /**\n   * Prepare the HTML document for readability to scrape it.\n   * This includes things like stripping javascript, CSS, and handling terrible markup.\n   *\n   * @return void\n   **/\n  _prepDocument() {\n    var doc = this._doc;\n\n    // Remove all style tags in head\n    this._removeNodes(this._getAllNodesWithTag(doc, [\"style\"]));\n\n    if (doc.body) {\n      this._replaceBrs(doc.body);\n    }\n\n    this._replaceNodeTags(this._getAllNodesWithTag(doc, [\"font\"]), \"SPAN\");\n  },\n\n  /**\n   * Finds the next node, starting from the given node, and ignoring\n   * whitespace in between. If the given node is an element, the same node is\n   * returned.\n   */\n  _nextNode(node) {\n    var next = node;\n    while (\n      next &&\n      next.nodeType != this.ELEMENT_NODE &&\n      this.REGEXPS.whitespace.test(next.textContent)\n    ) {\n      next = next.nextSibling;\n    }\n    return next;\n  },\n\n  /**\n   * Replaces 2 or more successive <br> elements with a single <p>.\n   * Whitespace between <br> elements are ignored. For example:\n   *   <div>foo<br>bar<br> <br><br>abc</div>\n   * will become:\n   *   <div>foo<br>bar<p>abc</p></div>\n   */\n  _replaceBrs(elem) {\n    this._forEachNode(this._getAllNodesWithTag(elem, [\"br\"]), function (br) {\n      var next = br.nextSibling;\n\n      // Whether 2 or more <br> elements have been found and replaced with a\n      // <p> block.\n      var replaced = false;\n\n      // If we find a <br> chain, remove the <br>s until we hit another node\n      // or non-whitespace. This leaves behind the first <br> in the chain\n      // (which will be replaced with a <p> later).\n      while ((next = this._nextNode(next)) && next.tagName == \"BR\") {\n        replaced = true;\n        var brSibling = next.nextSibling;\n        next.remove();\n        next = brSibling;\n      }\n\n      // If we removed a <br> chain, replace the remaining <br> with a <p>. Add\n      // all sibling nodes as children of the <p> until we hit another <br>\n      // chain.\n      if (replaced) {\n        var p = this._doc.createElement(\"p\");\n        br.parentNode.replaceChild(p, br);\n\n        next = p.nextSibling;\n        while (next) {\n          // If we've hit another <br><br>, we're done adding children to this <p>.\n          if (next.tagName == \"BR\") {\n            var nextElem = this._nextNode(next.nextSibling);\n            if (nextElem && nextElem.tagName == \"BR\") {\n              break;\n            }\n          }\n\n          if (!this._isPhrasingContent(next)) {\n            break;\n          }\n\n          // Otherwise, make this node a child of the new <p>.\n          var sibling = next.nextSibling;\n          p.appendChild(next);\n          next = sibling;\n        }\n\n        while (p.lastChild && this._isWhitespace(p.lastChild)) {\n          p.lastChild.remove();\n        }\n\n        if (p.parentNode.tagName === \"P\") {\n          this._setNodeTag(p.parentNode, \"DIV\");\n        }\n      }\n    });\n  },\n\n  _setNodeTag(node, tag) {\n    this.log(\"_setNodeTag\", node, tag);\n    if (this._docJSDOMParser) {\n      node.localName = tag.toLowerCase();\n      node.tagName = tag.toUpperCase();\n      return node;\n    }\n\n    var replacement = node.ownerDocument.createElement(tag);\n    while (node.firstChild) {\n      replacement.appendChild(node.firstChild);\n    }\n    node.parentNode.replaceChild(replacement, node);\n    if (node.readability) {\n      replacement.readability = node.readability;\n    }\n\n    for (var i = 0; i < node.attributes.length; i++) {\n      replacement.setAttributeNode(node.attributes[i].cloneNode());\n    }\n    return replacement;\n  },\n\n  /**\n   * Prepare the article node for display. Clean out any inline styles,\n   * iframes, forms, strip extraneous <p> tags, etc.\n   *\n   * @param Element\n   * @return void\n   **/\n  _prepArticle(articleContent) {\n    this._cleanStyles(articleContent);\n\n    // Check for data tables before we continue, to avoid removing items in\n    // those tables, which will often be isolated even though they're\n    // visually linked to other content-ful elements (text, images, etc.).\n    this._markDataTables(articleContent);\n\n    this._fixLazyImages(articleContent);\n\n    // Clean out junk from the article content\n    this._cleanConditionally(articleContent, \"form\");\n    this._cleanConditionally(articleContent, \"fieldset\");\n    this._clean(articleContent, \"object\");\n    this._clean(articleContent, \"embed\");\n    this._clean(articleContent, \"footer\");\n    this._clean(articleContent, \"link\");\n    this._clean(articleContent, \"aside\");\n\n    // Clean out elements with little content that have \"share\" in their id/class combinations from final top candidates,\n    // which means we don't remove the top candidates even they have \"share\".\n\n    var shareElementThreshold = this.DEFAULT_CHAR_THRESHOLD;\n\n    this._forEachNode(articleContent.children, function (topCandidate) {\n      this._cleanMatchedNodes(topCandidate, function (node, matchString) {\n        return (\n          this.REGEXPS.shareElements.test(matchString) &&\n          node.textContent.length < shareElementThreshold\n        );\n      });\n    });\n\n    this._clean(articleContent, \"iframe\");\n    this._clean(articleContent, \"input\");\n    this._clean(articleContent, \"textarea\");\n    this._clean(articleContent, \"select\");\n    this._clean(articleContent, \"button\");\n    this._cleanHeaders(articleContent);\n\n    // Do these last as the previous stuff may have removed junk\n    // that will affect these\n    this._cleanConditionally(articleContent, \"table\");\n    this._cleanConditionally(articleContent, \"ul\");\n    this._cleanConditionally(articleContent, \"div\");\n\n    // replace H1 with H2 as H1 should be only title that is displayed separately\n    this._replaceNodeTags(\n      this._getAllNodesWithTag(articleContent, [\"h1\"]),\n      \"h2\"\n    );\n\n    // Remove extra paragraphs\n    this._removeNodes(\n      this._getAllNodesWithTag(articleContent, [\"p\"]),\n      function (paragraph) {\n        // At this point, nasty iframes have been removed; only embedded video\n        // ones remain.\n        var contentElementCount = this._getAllNodesWithTag(paragraph, [\n          \"img\",\n          \"embed\",\n          \"object\",\n          \"iframe\",\n        ]).length;\n        return (\n          contentElementCount === 0 && !this._getInnerText(paragraph, false)\n        );\n      }\n    );\n\n    this._forEachNode(\n      this._getAllNodesWithTag(articleContent, [\"br\"]),\n      function (br) {\n        var next = this._nextNode(br.nextSibling);\n        if (next && next.tagName == \"P\") {\n          br.remove();\n        }\n      }\n    );\n\n    // Remove single-cell tables\n    this._forEachNode(\n      this._getAllNodesWithTag(articleContent, [\"table\"]),\n      function (table) {\n        var tbody = this._hasSingleTagInsideElement(table, \"TBODY\")\n          ? table.firstElementChild\n          : table;\n        if (this._hasSingleTagInsideElement(tbody, \"TR\")) {\n          var row = tbody.firstElementChild;\n          if (this._hasSingleTagInsideElement(row, \"TD\")) {\n            var cell = row.firstElementChild;\n            cell = this._setNodeTag(\n              cell,\n              this._everyNode(cell.childNodes, this._isPhrasingContent)\n                ? \"P\"\n                : \"DIV\"\n            );\n            table.parentNode.replaceChild(cell, table);\n          }\n        }\n      }\n    );\n  },\n\n  /**\n   * Initialize a node with the readability object. Also checks the\n   * className/id for special names to add to its score.\n   *\n   * @param Element\n   * @return void\n   **/\n  _initializeNode(node) {\n    node.readability = { contentScore: 0 };\n\n    switch (node.tagName) {\n      case \"DIV\":\n        node.readability.contentScore += 5;\n        break;\n\n      case \"PRE\":\n      case \"TD\":\n      case \"BLOCKQUOTE\":\n        node.readability.contentScore += 3;\n        break;\n\n      case \"ADDRESS\":\n      case \"OL\":\n      case \"UL\":\n      case \"DL\":\n      case \"DD\":\n      case \"DT\":\n      case \"LI\":\n      case \"FORM\":\n        node.readability.contentScore -= 3;\n        break;\n\n      case \"H1\":\n      case \"H2\":\n      case \"H3\":\n      case \"H4\":\n      case \"H5\":\n      case \"H6\":\n      case \"TH\":\n        node.readability.contentScore -= 5;\n        break;\n    }\n\n    node.readability.contentScore += this._getClassWeight(node);\n  },\n\n  _removeAndGetNext(node) {\n    var nextNode = this._getNextNode(node, true);\n    node.remove();\n    return nextNode;\n  },\n\n  /**\n   * Traverse the DOM from node to node, starting at the node passed in.\n   * Pass true for the second parameter to indicate this node itself\n   * (and its kids) are going away, and we want the next node over.\n   *\n   * Calling this in a loop will traverse the DOM depth-first.\n   *\n   * @param {Element} node\n   * @param {boolean} ignoreSelfAndKids\n   * @return {Element}\n   */\n  _getNextNode(node, ignoreSelfAndKids) {\n    // First check for kids if those aren't being ignored\n    if (!ignoreSelfAndKids && node.firstElementChild) {\n      return node.firstElementChild;\n    }\n    // Then for siblings...\n    if (node.nextElementSibling) {\n      return node.nextElementSibling;\n    }\n    // And finally, move up the parent chain *and* find a sibling\n    // (because this is depth-first traversal, we will have already\n    // seen the parent nodes themselves).\n    do {\n      node = node.parentNode;\n    } while (node && !node.nextElementSibling);\n    return node && node.nextElementSibling;\n  },\n\n  // compares second text to first one\n  // 1 = same text, 0 = completely different text\n  // works the way that it splits both texts into words and then finds words that are unique in second text\n  // the result is given by the lower length of unique parts\n  _textSimilarity(textA, textB) {\n    var tokensA = textA\n      .toLowerCase()\n      .split(this.REGEXPS.tokenize)\n      .filter(Boolean);\n    var tokensB = textB\n      .toLowerCase()\n      .split(this.REGEXPS.tokenize)\n      .filter(Boolean);\n    if (!tokensA.length || !tokensB.length) {\n      return 0;\n    }\n    var uniqTokensB = tokensB.filter(token => !tokensA.includes(token));\n    var distanceB = uniqTokensB.join(\" \").length / tokensB.join(\" \").length;\n    return 1 - distanceB;\n  },\n\n  /**\n   * Checks whether an element node contains a valid byline\n   *\n   * @param node {Element}\n   * @param matchString {string}\n   * @return boolean\n   */\n  _isValidByline(node, matchString) {\n    var rel = node.getAttribute(\"rel\");\n    var itemprop = node.getAttribute(\"itemprop\");\n    var bylineLength = node.textContent.trim().length;\n\n    return (\n      (rel === \"author\" ||\n        (itemprop && itemprop.includes(\"author\")) ||\n        this.REGEXPS.byline.test(matchString)) &&\n      !!bylineLength &&\n      bylineLength < 100\n    );\n  },\n\n  _getNodeAncestors(node, maxDepth) {\n    maxDepth = maxDepth || 0;\n    var i = 0,\n      ancestors = [];\n    while (node.parentNode) {\n      ancestors.push(node.parentNode);\n      if (maxDepth && ++i === maxDepth) {\n        break;\n      }\n      node = node.parentNode;\n    }\n    return ancestors;\n  },\n\n  /***\n   * grabArticle - Using a variety of metrics (content score, classname, element types), find the content that is\n   *         most likely to be the stuff a user wants to read. Then return it wrapped up in a div.\n   *\n   * @param page a document to run upon. Needs to be a full document, complete with body.\n   * @return Element\n   **/\n  /* eslint-disable-next-line complexity */\n  _grabArticle(page) {\n    this.log(\"**** grabArticle ****\");\n    var doc = this._doc;\n    var isPaging = page !== null;\n    page = page ? page : this._doc.body;\n\n    // We can't grab an article if we don't have a page!\n    if (!page) {\n      this.log(\"No body found in document. Abort.\");\n      return null;\n    }\n\n    var pageCacheHtml = page.innerHTML;\n\n    while (true) {\n      this.log(\"Starting grabArticle loop\");\n      var stripUnlikelyCandidates = this._flagIsActive(\n        this.FLAG_STRIP_UNLIKELYS\n      );\n\n      // First, node prepping. Trash nodes that look cruddy (like ones with the\n      // class name \"comment\", etc), and turn divs into P tags where they have been\n      // used inappropriately (as in, where they contain no other block level elements.)\n      var elementsToScore = [];\n      var node = this._doc.documentElement;\n\n      let shouldRemoveTitleHeader = true;\n\n      while (node) {\n        if (node.tagName === \"HTML\") {\n          this._articleLang = node.getAttribute(\"lang\");\n        }\n\n        var matchString = node.className + \" \" + node.id;\n\n        if (!this._isProbablyVisible(node)) {\n          this.log(\"Removing hidden node - \" + matchString);\n          node = this._removeAndGetNext(node);\n          continue;\n        }\n\n        // User is not able to see elements applied with both \"aria-modal = true\" and \"role = dialog\"\n        if (\n          node.getAttribute(\"aria-modal\") == \"true\" &&\n          node.getAttribute(\"role\") == \"dialog\"\n        ) {\n          node = this._removeAndGetNext(node);\n          continue;\n        }\n\n        // If we don't have a byline yet check to see if this node is a byline; if it is store the byline and remove the node.\n        if (\n          !this._articleByline &&\n          !this._metadata.byline &&\n          this._isValidByline(node, matchString)\n        ) {\n          // Find child node matching [itemprop=\"name\"] and use that if it exists for a more accurate author name byline\n          var endOfSearchMarkerNode = this._getNextNode(node, true);\n          var next = this._getNextNode(node);\n          var itemPropNameNode = null;\n          while (next && next != endOfSearchMarkerNode) {\n            var itemprop = next.getAttribute(\"itemprop\");\n            if (itemprop && itemprop.includes(\"name\")) {\n              itemPropNameNode = next;\n              break;\n            } else {\n              next = this._getNextNode(next);\n            }\n          }\n          this._articleByline = (itemPropNameNode ?? node).textContent.trim();\n          node = this._removeAndGetNext(node);\n          continue;\n        }\n\n        if (shouldRemoveTitleHeader && this._headerDuplicatesTitle(node)) {\n          this.log(\n            \"Removing header: \",\n            node.textContent.trim(),\n            this._articleTitle.trim()\n          );\n          shouldRemoveTitleHeader = false;\n          node = this._removeAndGetNext(node);\n          continue;\n        }\n\n        // Remove unlikely candidates\n        if (stripUnlikelyCandidates) {\n          if (\n            this.REGEXPS.unlikelyCandidates.test(matchString) &&\n            !this.REGEXPS.okMaybeItsACandidate.test(matchString) &&\n            !this._hasAncestorTag(node, \"table\") &&\n            !this._hasAncestorTag(node, \"code\") &&\n            node.tagName !== \"BODY\" &&\n            node.tagName !== \"A\"\n          ) {\n            this.log(\"Removing unlikely candidate - \" + matchString);\n            node = this._removeAndGetNext(node);\n            continue;\n          }\n\n          if (this.UNLIKELY_ROLES.includes(node.getAttribute(\"role\"))) {\n            this.log(\n              \"Removing content with role \" +\n                node.getAttribute(\"role\") +\n                \" - \" +\n                matchString\n            );\n            node = this._removeAndGetNext(node);\n            continue;\n          }\n        }\n\n        // Remove DIV, SECTION, and HEADER nodes without any content(e.g. text, image, video, or iframe).\n        if (\n          (node.tagName === \"DIV\" ||\n            node.tagName === \"SECTION\" ||\n            node.tagName === \"HEADER\" ||\n            node.tagName === \"H1\" ||\n            node.tagName === \"H2\" ||\n            node.tagName === \"H3\" ||\n            node.tagName === \"H4\" ||\n            node.tagName === \"H5\" ||\n            node.tagName === \"H6\") &&\n          this._isElementWithoutContent(node)\n        ) {\n          node = this._removeAndGetNext(node);\n          continue;\n        }\n\n        if (this.DEFAULT_TAGS_TO_SCORE.includes(node.tagName)) {\n          elementsToScore.push(node);\n        }\n\n        // Turn all divs that don't have children block level elements into p's\n        if (node.tagName === \"DIV\") {\n          // Put phrasing content into paragraphs.\n          var p = null;\n          var childNode = node.firstChild;\n          while (childNode) {\n            var nextSibling = childNode.nextSibling;\n            if (this._isPhrasingContent(childNode)) {\n              if (p !== null) {\n                p.appendChild(childNode);\n              } else if (!this._isWhitespace(childNode)) {\n                p = doc.createElement(\"p\");\n                node.replaceChild(p, childNode);\n                p.appendChild(childNode);\n              }\n            } else if (p !== null) {\n              while (p.lastChild && this._isWhitespace(p.lastChild)) {\n                p.lastChild.remove();\n              }\n              p = null;\n            }\n            childNode = nextSibling;\n          }\n\n          // Sites like http://mobile.slate.com encloses each paragraph with a DIV\n          // element. DIVs with only a P element inside and no text content can be\n          // safely converted into plain P elements to avoid confusing the scoring\n          // algorithm with DIVs with are, in practice, paragraphs.\n          if (\n            this._hasSingleTagInsideElement(node, \"P\") &&\n            this._getLinkDensity(node) < 0.25\n          ) {\n            var newNode = node.children[0];\n            node.parentNode.replaceChild(newNode, node);\n            node = newNode;\n            elementsToScore.push(node);\n          } else if (!this._hasChildBlockElement(node)) {\n            node = this._setNodeTag(node, \"P\");\n            elementsToScore.push(node);\n          }\n        }\n        node = this._getNextNode(node);\n      }\n\n      /**\n       * Loop through all paragraphs, and assign a score to them based on how content-y they look.\n       * Then add their score to their parent node.\n       *\n       * A score is determined by things like number of commas, class names, etc. Maybe eventually link density.\n       **/\n      var candidates = [];\n      this._forEachNode(elementsToScore, function (elementToScore) {\n        if (\n          !elementToScore.parentNode ||\n          typeof elementToScore.parentNode.tagName === \"undefined\"\n        ) {\n          return;\n        }\n\n        // If this paragraph is less than 25 characters, don't even count it.\n        var innerText = this._getInnerText(elementToScore);\n        if (innerText.length < 25) {\n          return;\n        }\n\n        // Exclude nodes with no ancestor.\n        var ancestors = this._getNodeAncestors(elementToScore, 5);\n        if (ancestors.length === 0) {\n          return;\n        }\n\n        var contentScore = 0;\n\n        // Add a point for the paragraph itself as a base.\n        contentScore += 1;\n\n        // Add points for any commas within this paragraph.\n        contentScore += innerText.split(this.REGEXPS.commas).length;\n\n        // For every 100 characters in this paragraph, add another point. Up to 3 points.\n        contentScore += Math.min(Math.floor(innerText.length / 100), 3);\n\n        // Initialize and score ancestors.\n        this._forEachNode(ancestors, function (ancestor, level) {\n          if (\n            !ancestor.tagName ||\n            !ancestor.parentNode ||\n            typeof ancestor.parentNode.tagName === \"undefined\"\n          ) {\n            return;\n          }\n\n          if (typeof ancestor.readability === \"undefined\") {\n            this._initializeNode(ancestor);\n            candidates.push(ancestor);\n          }\n\n          // Node score divider:\n          // - parent:             1 (no division)\n          // - grandparent:        2\n          // - great grandparent+: ancestor level * 3\n          if (level === 0) {\n            var scoreDivider = 1;\n          } else if (level === 1) {\n            scoreDivider = 2;\n          } else {\n            scoreDivider = level * 3;\n          }\n          ancestor.readability.contentScore += contentScore / scoreDivider;\n        });\n      });\n\n      // After we've calculated scores, loop through all of the possible\n      // candidate nodes we found and find the one with the highest score.\n      var topCandidates = [];\n      for (var c = 0, cl = candidates.length; c < cl; c += 1) {\n        var candidate = candidates[c];\n\n        // Scale the final candidates score based on link density. Good content\n        // should have a relatively small link density (5% or less) and be mostly\n        // unaffected by this operation.\n        var candidateScore =\n          candidate.readability.contentScore *\n          (1 - this._getLinkDensity(candidate));\n        candidate.readability.contentScore = candidateScore;\n\n        this.log(\"Candidate:\", candidate, \"with score \" + candidateScore);\n\n        for (var t = 0; t < this._nbTopCandidates; t++) {\n          var aTopCandidate = topCandidates[t];\n\n          if (\n            !aTopCandidate ||\n            candidateScore > aTopCandidate.readability.contentScore\n          ) {\n            topCandidates.splice(t, 0, candidate);\n            if (topCandidates.length > this._nbTopCandidates) {\n              topCandidates.pop();\n            }\n            break;\n          }\n        }\n      }\n\n      var topCandidate = topCandidates[0] || null;\n      var neededToCreateTopCandidate = false;\n      var parentOfTopCandidate;\n\n      // If we still have no top candidate, just use the body as a last resort.\n      // We also have to copy the body node so it is something we can modify.\n      if (topCandidate === null || topCandidate.tagName === \"BODY\") {\n        // Move all of the page's children into topCandidate\n        topCandidate = doc.createElement(\"DIV\");\n        neededToCreateTopCandidate = true;\n        // Move everything (not just elements, also text nodes etc.) into the container\n        // so we even include text directly in the body:\n        while (page.firstChild) {\n          this.log(\"Moving child out:\", page.firstChild);\n          topCandidate.appendChild(page.firstChild);\n        }\n\n        page.appendChild(topCandidate);\n\n        this._initializeNode(topCandidate);\n      } else if (topCandidate) {\n        // Find a better top candidate node if it contains (at least three) nodes which belong to `topCandidates` array\n        // and whose scores are quite closed with current `topCandidate` node.\n        var alternativeCandidateAncestors = [];\n        for (var i = 1; i < topCandidates.length; i++) {\n          if (\n            topCandidates[i].readability.contentScore /\n              topCandidate.readability.contentScore >=\n            0.75\n          ) {\n            alternativeCandidateAncestors.push(\n              this._getNodeAncestors(topCandidates[i])\n            );\n          }\n        }\n        var MINIMUM_TOPCANDIDATES = 3;\n        if (alternativeCandidateAncestors.length >= MINIMUM_TOPCANDIDATES) {\n          parentOfTopCandidate = topCandidate.parentNode;\n          while (parentOfTopCandidate.tagName !== \"BODY\") {\n            var listsContainingThisAncestor = 0;\n            for (\n              var ancestorIndex = 0;\n              ancestorIndex < alternativeCandidateAncestors.length &&\n              listsContainingThisAncestor < MINIMUM_TOPCANDIDATES;\n              ancestorIndex++\n            ) {\n              listsContainingThisAncestor += Number(\n                alternativeCandidateAncestors[ancestorIndex].includes(\n                  parentOfTopCandidate\n                )\n              );\n            }\n            if (listsContainingThisAncestor >= MINIMUM_TOPCANDIDATES) {\n              topCandidate = parentOfTopCandidate;\n              break;\n            }\n            parentOfTopCandidate = parentOfTopCandidate.parentNode;\n          }\n        }\n        if (!topCandidate.readability) {\n          this._initializeNode(topCandidate);\n        }\n\n        // Because of our bonus system, parents of candidates might have scores\n        // themselves. They get half of the node. There won't be nodes with higher\n        // scores than our topCandidate, but if we see the score going *up* in the first\n        // few steps up the tree, that's a decent sign that there might be more content\n        // lurking in other places that we want to unify in. The sibling stuff\n        // below does some of that - but only if we've looked high enough up the DOM\n        // tree.\n        parentOfTopCandidate = topCandidate.parentNode;\n        var lastScore = topCandidate.readability.contentScore;\n        // The scores shouldn't get too low.\n        var scoreThreshold = lastScore / 3;\n        while (parentOfTopCandidate.tagName !== \"BODY\") {\n          if (!parentOfTopCandidate.readability) {\n            parentOfTopCandidate = parentOfTopCandidate.parentNode;\n            continue;\n          }\n          var parentScore = parentOfTopCandidate.readability.contentScore;\n          if (parentScore < scoreThreshold) {\n            break;\n          }\n          if (parentScore > lastScore) {\n            // Alright! We found a better parent to use.\n            topCandidate = parentOfTopCandidate;\n            break;\n          }\n          lastScore = parentOfTopCandidate.readability.contentScore;\n          parentOfTopCandidate = parentOfTopCandidate.parentNode;\n        }\n\n        // If the top candidate is the only child, use parent instead. This will help sibling\n        // joining logic when adjacent content is actually located in parent's sibling node.\n        parentOfTopCandidate = topCandidate.parentNode;\n        while (\n          parentOfTopCandidate.tagName != \"BODY\" &&\n          parentOfTopCandidate.children.length == 1\n        ) {\n          topCandidate = parentOfTopCandidate;\n          parentOfTopCandidate = topCandidate.parentNode;\n        }\n        if (!topCandidate.readability) {\n          this._initializeNode(topCandidate);\n        }\n      }\n\n      // Now that we have the top candidate, look through its siblings for content\n      // that might also be related. Things like preambles, content split by ads\n      // that we removed, etc.\n      var articleContent = doc.createElement(\"DIV\");\n      if (isPaging) {\n        articleContent.id = \"readability-content\";\n      }\n\n      var siblingScoreThreshold = Math.max(\n        10,\n        topCandidate.readability.contentScore * 0.2\n      );\n      // Keep potential top candidate's parent node to try to get text direction of it later.\n      parentOfTopCandidate = topCandidate.parentNode;\n      var siblings = parentOfTopCandidate.children;\n\n      for (var s = 0, sl = siblings.length; s < sl; s++) {\n        var sibling = siblings[s];\n        var append = false;\n\n        this.log(\n          \"Looking at sibling node:\",\n          sibling,\n          sibling.readability\n            ? \"with score \" + sibling.readability.contentScore\n            : \"\"\n        );\n        this.log(\n          \"Sibling has score\",\n          sibling.readability ? sibling.readability.contentScore : \"Unknown\"\n        );\n\n        if (sibling === topCandidate) {\n          append = true;\n        } else {\n          var contentBonus = 0;\n\n          // Give a bonus if sibling nodes and top candidates have the example same classname\n          if (\n            sibling.className === topCandidate.className &&\n            topCandidate.className !== \"\"\n          ) {\n            contentBonus += topCandidate.readability.contentScore * 0.2;\n          }\n\n          if (\n            sibling.readability &&\n            sibling.readability.contentScore + contentBonus >=\n              siblingScoreThreshold\n          ) {\n            append = true;\n          } else if (sibling.nodeName === \"P\") {\n            var linkDensity = this._getLinkDensity(sibling);\n            var nodeContent = this._getInnerText(sibling);\n            var nodeLength = nodeContent.length;\n\n            if (nodeLength > 80 && linkDensity < 0.25) {\n              append = true;\n            } else if (\n              nodeLength < 80 &&\n              nodeLength > 0 &&\n              linkDensity === 0 &&\n              nodeContent.search(/\\.( |$)/) !== -1\n            ) {\n              append = true;\n            }\n          }\n        }\n\n        if (append) {\n          this.log(\"Appending node:\", sibling);\n\n          if (!this.ALTER_TO_DIV_EXCEPTIONS.includes(sibling.nodeName)) {\n            // We have a node that isn't a common block level element, like a form or td tag.\n            // Turn it into a div so it doesn't get filtered out later by accident.\n            this.log(\"Altering sibling:\", sibling, \"to div.\");\n\n            sibling = this._setNodeTag(sibling, \"DIV\");\n          }\n\n          articleContent.appendChild(sibling);\n          // Fetch children again to make it compatible\n          // with DOM parsers without live collection support.\n          siblings = parentOfTopCandidate.children;\n          // siblings is a reference to the children array, and\n          // sibling is removed from the array when we call appendChild().\n          // As a result, we must revisit this index since the nodes\n          // have been shifted.\n          s -= 1;\n          sl -= 1;\n        }\n      }\n\n      if (this._debug) {\n        this.log(\"Article content pre-prep: \" + articleContent.innerHTML);\n      }\n      // So we have all of the content that we need. Now we clean it up for presentation.\n      this._prepArticle(articleContent);\n      if (this._debug) {\n        this.log(\"Article content post-prep: \" + articleContent.innerHTML);\n      }\n\n      if (neededToCreateTopCandidate) {\n        // We already created a fake div thing, and there wouldn't have been any siblings left\n        // for the previous loop, so there's no point trying to create a new div, and then\n        // move all the children over. Just assign IDs and class names here. No need to append\n        // because that already happened anyway.\n        topCandidate.id = \"readability-page-1\";\n        topCandidate.className = \"page\";\n      } else {\n        var div = doc.createElement(\"DIV\");\n        div.id = \"readability-page-1\";\n        div.className = \"page\";\n        while (articleContent.firstChild) {\n          div.appendChild(articleContent.firstChild);\n        }\n        articleContent.appendChild(div);\n      }\n\n      if (this._debug) {\n        this.log(\"Article content after paging: \" + articleContent.innerHTML);\n      }\n\n      var parseSuccessful = true;\n\n      // Now that we've gone through the full algorithm, check to see if\n      // we got any meaningful content. If we didn't, we may need to re-run\n      // grabArticle with different flags set. This gives us a higher likelihood of\n      // finding the content, and the sieve approach gives us a higher likelihood of\n      // finding the -right- content.\n      var textLength = this._getInnerText(articleContent, true).length;\n      if (textLength < this._charThreshold) {\n        parseSuccessful = false;\n        // eslint-disable-next-line no-unsanitized/property\n        page.innerHTML = pageCacheHtml;\n\n        this._attempts.push({\n          articleContent,\n          textLength,\n        });\n\n        if (this._flagIsActive(this.FLAG_STRIP_UNLIKELYS)) {\n          this._removeFlag(this.FLAG_STRIP_UNLIKELYS);\n        } else if (this._flagIsActive(this.FLAG_WEIGHT_CLASSES)) {\n          this._removeFlag(this.FLAG_WEIGHT_CLASSES);\n        } else if (this._flagIsActive(this.FLAG_CLEAN_CONDITIONALLY)) {\n          this._removeFlag(this.FLAG_CLEAN_CONDITIONALLY);\n        } else {\n          // No luck after removing flags, just return the longest text we found during the different loops\n          this._attempts.sort(function (a, b) {\n            return b.textLength - a.textLength;\n          });\n\n          // But first check if we actually have something\n          if (!this._attempts[0].textLength) {\n            return null;\n          }\n\n          articleContent = this._attempts[0].articleContent;\n          parseSuccessful = true;\n        }\n      }\n\n      if (parseSuccessful) {\n        // Find out text direction from ancestors of final top candidate.\n        var ancestors = [parentOfTopCandidate, topCandidate].concat(\n          this._getNodeAncestors(parentOfTopCandidate)\n        );\n        this._someNode(ancestors, function (ancestor) {\n          if (!ancestor.tagName) {\n            return false;\n          }\n          var articleDir = ancestor.getAttribute(\"dir\");\n          if (articleDir) {\n            this._articleDir = articleDir;\n            return true;\n          }\n          return false;\n        });\n        return articleContent;\n      }\n    }\n  },\n\n  /**\n   * Converts some of the common HTML entities in string to their corresponding characters.\n   *\n   * @param str {string} - a string to unescape.\n   * @return string without HTML entity.\n   */\n  _unescapeHtmlEntities(str) {\n    if (!str) {\n      return str;\n    }\n\n    var htmlEscapeMap = this.HTML_ESCAPE_MAP;\n    return str\n      .replace(/&(quot|amp|apos|lt|gt);/g, function (_, tag) {\n        return htmlEscapeMap[tag];\n      })\n      .replace(/&#(?:x([0-9a-f]+)|([0-9]+));/gi, function (_, hex, numStr) {\n        var num = parseInt(hex || numStr, hex ? 16 : 10);\n\n        // these character references are replaced by a conforming HTML parser\n        if (num == 0 || num > 0x10ffff || (num >= 0xd800 && num <= 0xdfff)) {\n          num = 0xfffd;\n        }\n\n        return String.fromCodePoint(num);\n      });\n  },\n\n  /**\n   * Try to extract metadata from JSON-LD object.\n   * For now, only Schema.org objects of type Article or its subtypes are supported.\n   * @return Object with any metadata that could be extracted (possibly none)\n   */\n  _getJSONLD(doc) {\n    var scripts = this._getAllNodesWithTag(doc, [\"script\"]);\n\n    var metadata;\n\n    this._forEachNode(scripts, function (jsonLdElement) {\n      if (\n        !metadata &&\n        jsonLdElement.getAttribute(\"type\") === \"application/ld+json\"\n      ) {\n        try {\n          // Strip CDATA markers if present\n          var content = jsonLdElement.textContent.replace(\n            /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g,\n            \"\"\n          );\n          var parsed = JSON.parse(content);\n\n          if (Array.isArray(parsed)) {\n            parsed = parsed.find(it => {\n              return (\n                it[\"@type\"] &&\n                it[\"@type\"].match(this.REGEXPS.jsonLdArticleTypes)\n              );\n            });\n            if (!parsed) {\n              return;\n            }\n          }\n\n          var schemaDotOrgRegex = /^https?\\:\\/\\/schema\\.org\\/?$/;\n          var matches =\n            (typeof parsed[\"@context\"] === \"string\" &&\n              parsed[\"@context\"].match(schemaDotOrgRegex)) ||\n            (typeof parsed[\"@context\"] === \"object\" &&\n              typeof parsed[\"@context\"][\"@vocab\"] == \"string\" &&\n              parsed[\"@context\"][\"@vocab\"].match(schemaDotOrgRegex));\n\n          if (!matches) {\n            return;\n          }\n\n          if (!parsed[\"@type\"] && Array.isArray(parsed[\"@graph\"])) {\n            parsed = parsed[\"@graph\"].find(it => {\n              return (it[\"@type\"] || \"\").match(this.REGEXPS.jsonLdArticleTypes);\n            });\n          }\n\n          if (\n            !parsed ||\n            !parsed[\"@type\"] ||\n            !parsed[\"@type\"].match(this.REGEXPS.jsonLdArticleTypes)\n          ) {\n            return;\n          }\n\n          metadata = {};\n\n          if (\n            typeof parsed.name === \"string\" &&\n            typeof parsed.headline === \"string\" &&\n            parsed.name !== parsed.headline\n          ) {\n            // we have both name and headline element in the JSON-LD. They should both be the same but some websites like aktualne.cz\n            // put their own name into \"name\" and the article title to \"headline\" which confuses Readability. So we try to check if either\n            // \"name\" or \"headline\" closely matches the html title, and if so, use that one. If not, then we use \"name\" by default.\n\n            var title = this._getArticleTitle();\n            var nameMatches = this._textSimilarity(parsed.name, title) > 0.75;\n            var headlineMatches =\n              this._textSimilarity(parsed.headline, title) > 0.75;\n\n            if (headlineMatches && !nameMatches) {\n              metadata.title = parsed.headline;\n            } else {\n              metadata.title = parsed.name;\n            }\n          } else if (typeof parsed.name === \"string\") {\n            metadata.title = parsed.name.trim();\n          } else if (typeof parsed.headline === \"string\") {\n            metadata.title = parsed.headline.trim();\n          }\n          if (parsed.author) {\n            if (typeof parsed.author.name === \"string\") {\n              metadata.byline = parsed.author.name.trim();\n            } else if (\n              Array.isArray(parsed.author) &&\n              parsed.author[0] &&\n              typeof parsed.author[0].name === \"string\"\n            ) {\n              metadata.byline = parsed.author\n                .filter(function (author) {\n                  return author && typeof author.name === \"string\";\n                })\n                .map(function (author) {\n                  return author.name.trim();\n                })\n                .join(\", \");\n            }\n          }\n          if (typeof parsed.description === \"string\") {\n            metadata.excerpt = parsed.description.trim();\n          }\n          if (parsed.publisher && typeof parsed.publisher.name === \"string\") {\n            metadata.siteName = parsed.publisher.name.trim();\n          }\n          if (typeof parsed.datePublished === \"string\") {\n            metadata.datePublished = parsed.datePublished.trim();\n          }\n        } catch (err) {\n          this.log(err.message);\n        }\n      }\n    });\n    return metadata ? metadata : {};\n  },\n\n  /**\n   * Attempts to get excerpt and byline metadata for the article.\n   *\n   * @param {Object} jsonld — object containing any metadata that\n   * could be extracted from JSON-LD object.\n   *\n   * @return Object with optional \"excerpt\" and \"byline\" properties\n   */\n  _getArticleMetadata(jsonld) {\n    var metadata = {};\n    var values = {};\n    var metaElements = this._doc.getElementsByTagName(\"meta\");\n\n    // property is a space-separated list of values\n    var propertyPattern =\n      /\\s*(article|dc|dcterm|og|twitter)\\s*:\\s*(author|creator|description|published_time|title|site_name)\\s*/gi;\n\n    // name is a single value\n    var namePattern =\n      /^\\s*(?:(dc|dcterm|og|twitter|parsely|weibo:(article|webpage))\\s*[-\\.:]\\s*)?(author|creator|pub-date|description|title|site_name)\\s*$/i;\n\n    // Find description tags.\n    this._forEachNode(metaElements, function (element) {\n      var elementName = element.getAttribute(\"name\");\n      var elementProperty = element.getAttribute(\"property\");\n      var content = element.getAttribute(\"content\");\n      if (!content) {\n        return;\n      }\n      var matches = null;\n      var name = null;\n\n      if (elementProperty) {\n        matches = elementProperty.match(propertyPattern);\n        if (matches) {\n          // Convert to lowercase, and remove any whitespace\n          // so we can match below.\n          name = matches[0].toLowerCase().replace(/\\s/g, \"\");\n          // multiple authors\n          values[name] = content.trim();\n        }\n      }\n      if (!matches && elementName && namePattern.test(elementName)) {\n        name = elementName;\n        if (content) {\n          // Convert to lowercase, remove any whitespace, and convert dots\n          // to colons so we can match below.\n          name = name.toLowerCase().replace(/\\s/g, \"\").replace(/\\./g, \":\");\n          values[name] = content.trim();\n        }\n      }\n    });\n\n    // get title\n    metadata.title =\n      jsonld.title ||\n      values[\"dc:title\"] ||\n      values[\"dcterm:title\"] ||\n      values[\"og:title\"] ||\n      values[\"weibo:article:title\"] ||\n      values[\"weibo:webpage:title\"] ||\n      values.title ||\n      values[\"twitter:title\"] ||\n      values[\"parsely-title\"];\n\n    if (!metadata.title) {\n      metadata.title = this._getArticleTitle();\n    }\n\n    const articleAuthor =\n      typeof values[\"article:author\"] === \"string\" &&\n      !this._isUrl(values[\"article:author\"])\n        ? values[\"article:author\"]\n        : undefined;\n\n    // get author\n    metadata.byline =\n      jsonld.byline ||\n      values[\"dc:creator\"] ||\n      values[\"dcterm:creator\"] ||\n      values.author ||\n      values[\"parsely-author\"] ||\n      articleAuthor;\n\n    // get description\n    metadata.excerpt =\n      jsonld.excerpt ||\n      values[\"dc:description\"] ||\n      values[\"dcterm:description\"] ||\n      values[\"og:description\"] ||\n      values[\"weibo:article:description\"] ||\n      values[\"weibo:webpage:description\"] ||\n      values.description ||\n      values[\"twitter:description\"];\n\n    // get site name\n    metadata.siteName = jsonld.siteName || values[\"og:site_name\"];\n\n    // get article published time\n    metadata.publishedTime =\n      jsonld.datePublished ||\n      values[\"article:published_time\"] ||\n      values[\"parsely-pub-date\"] ||\n      null;\n\n    // in many sites the meta value is escaped with HTML entities,\n    // so here we need to unescape it\n    metadata.title = this._unescapeHtmlEntities(metadata.title);\n    metadata.byline = this._unescapeHtmlEntities(metadata.byline);\n    metadata.excerpt = this._unescapeHtmlEntities(metadata.excerpt);\n    metadata.siteName = this._unescapeHtmlEntities(metadata.siteName);\n    metadata.publishedTime = this._unescapeHtmlEntities(metadata.publishedTime);\n\n    return metadata;\n  },\n\n  /**\n   * Check if node is image, or if node contains exactly only one image\n   * whether as a direct child or as its descendants.\n   *\n   * @param Element\n   **/\n  _isSingleImage(node) {\n    while (node) {\n      if (node.tagName === \"IMG\") {\n        return true;\n      }\n      if (node.children.length !== 1 || node.textContent.trim() !== \"\") {\n        return false;\n      }\n      node = node.children[0];\n    }\n    return false;\n  },\n\n  /**\n   * Find all <noscript> that are located after <img> nodes, and which contain only one\n   * <img> element. Replace the first image with the image from inside the <noscript> tag,\n   * and remove the <noscript> tag. This improves the quality of the images we use on\n   * some sites (e.g. Medium).\n   *\n   * @param Element\n   **/\n  _unwrapNoscriptImages(doc) {\n    // Find img without source or attributes that might contains image, and remove it.\n    // This is done to prevent a placeholder img is replaced by img from noscript in next step.\n    var imgs = Array.from(doc.getElementsByTagName(\"img\"));\n    this._forEachNode(imgs, function (img) {\n      for (var i = 0; i < img.attributes.length; i++) {\n        var attr = img.attributes[i];\n        switch (attr.name) {\n          case \"src\":\n          case \"srcset\":\n          case \"data-src\":\n          case \"data-srcset\":\n            return;\n        }\n\n        if (/\\.(jpg|jpeg|png|webp)/i.test(attr.value)) {\n          return;\n        }\n      }\n\n      img.remove();\n    });\n\n    // Next find noscript and try to extract its image\n    var noscripts = Array.from(doc.getElementsByTagName(\"noscript\"));\n    this._forEachNode(noscripts, function (noscript) {\n      // Parse content of noscript and make sure it only contains image\n      if (!this._isSingleImage(noscript)) {\n        return;\n      }\n      var tmp = doc.createElement(\"div\");\n      // We're running in the document context, and using unmodified\n      // document contents, so doing this should be safe.\n      // (Also we heavily discourage people from allowing script to\n      // run at all in this document...)\n      // eslint-disable-next-line no-unsanitized/property\n      tmp.innerHTML = noscript.innerHTML;\n\n      // If noscript has previous sibling and it only contains image,\n      // replace it with noscript content. However we also keep old\n      // attributes that might contains image.\n      var prevElement = noscript.previousElementSibling;\n      if (prevElement && this._isSingleImage(prevElement)) {\n        var prevImg = prevElement;\n        if (prevImg.tagName !== \"IMG\") {\n          prevImg = prevElement.getElementsByTagName(\"img\")[0];\n        }\n\n        var newImg = tmp.getElementsByTagName(\"img\")[0];\n        for (var i = 0; i < prevImg.attributes.length; i++) {\n          var attr = prevImg.attributes[i];\n          if (attr.value === \"\") {\n            continue;\n          }\n\n          if (\n            attr.name === \"src\" ||\n            attr.name === \"srcset\" ||\n            /\\.(jpg|jpeg|png|webp)/i.test(attr.value)\n          ) {\n            if (newImg.getAttribute(attr.name) === attr.value) {\n              continue;\n            }\n\n            var attrName = attr.name;\n            if (newImg.hasAttribute(attrName)) {\n              attrName = \"data-old-\" + attrName;\n            }\n\n            newImg.setAttribute(attrName, attr.value);\n          }\n        }\n\n        noscript.parentNode.replaceChild(tmp.firstElementChild, prevElement);\n      }\n    });\n  },\n\n  /**\n   * Removes script tags from the document.\n   *\n   * @param Element\n   **/\n  _removeScripts(doc) {\n    this._removeNodes(this._getAllNodesWithTag(doc, [\"script\", \"noscript\"]));\n  },\n\n  /**\n   * Check if this node has only whitespace and a single element with given tag\n   * Returns false if the DIV node contains non-empty text nodes\n   * or if it contains no element with given tag or more than 1 element.\n   *\n   * @param Element\n   * @param string tag of child element\n   **/\n  _hasSingleTagInsideElement(element, tag) {\n    // There should be exactly 1 element child with given tag\n    if (element.children.length != 1 || element.children[0].tagName !== tag) {\n      return false;\n    }\n\n    // And there should be no text nodes with real content\n    return !this._someNode(element.childNodes, function (node) {\n      return (\n        node.nodeType === this.TEXT_NODE &&\n        this.REGEXPS.hasContent.test(node.textContent)\n      );\n    });\n  },\n\n  _isElementWithoutContent(node) {\n    return (\n      node.nodeType === this.ELEMENT_NODE &&\n      !node.textContent.trim().length &&\n      (!node.children.length ||\n        node.children.length ==\n          node.getElementsByTagName(\"br\").length +\n            node.getElementsByTagName(\"hr\").length)\n    );\n  },\n\n  /**\n   * Determine whether element has any children block level elements.\n   *\n   * @param Element\n   */\n  _hasChildBlockElement(element) {\n    return this._someNode(element.childNodes, function (node) {\n      return (\n        this.DIV_TO_P_ELEMS.has(node.tagName) ||\n        this._hasChildBlockElement(node)\n      );\n    });\n  },\n\n  /***\n   * Determine if a node qualifies as phrasing content.\n   * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Content_categories#Phrasing_content\n   **/\n  _isPhrasingContent(node) {\n    return (\n      node.nodeType === this.TEXT_NODE ||\n      this.PHRASING_ELEMS.includes(node.tagName) ||\n      ((node.tagName === \"A\" ||\n        node.tagName === \"DEL\" ||\n        node.tagName === \"INS\") &&\n        this._everyNode(node.childNodes, this._isPhrasingContent))\n    );\n  },\n\n  _isWhitespace(node) {\n    return (\n      (node.nodeType === this.TEXT_NODE &&\n        node.textContent.trim().length === 0) ||\n      (node.nodeType === this.ELEMENT_NODE && node.tagName === \"BR\")\n    );\n  },\n\n  /**\n   * Get the inner text of a node - cross browser compatibly.\n   * This also strips out any excess whitespace to be found.\n   *\n   * @param Element\n   * @param Boolean normalizeSpaces (default: true)\n   * @return string\n   **/\n  _getInnerText(e, normalizeSpaces) {\n    normalizeSpaces =\n      typeof normalizeSpaces === \"undefined\" ? true : normalizeSpaces;\n    var textContent = e.textContent.trim();\n\n    if (normalizeSpaces) {\n      return textContent.replace(this.REGEXPS.normalize, \" \");\n    }\n    return textContent;\n  },\n\n  /**\n   * Get the number of times a string s appears in the node e.\n   *\n   * @param Element\n   * @param string - what to split on. Default is \",\"\n   * @return number (integer)\n   **/\n  _getCharCount(e, s) {\n    s = s || \",\";\n    return this._getInnerText(e).split(s).length - 1;\n  },\n\n  /**\n   * Remove the style attribute on every e and under.\n   * TODO: Test if getElementsByTagName(*) is faster.\n   *\n   * @param Element\n   * @return void\n   **/\n  _cleanStyles(e) {\n    if (!e || e.tagName.toLowerCase() === \"svg\") {\n      return;\n    }\n\n    // Remove `style` and deprecated presentational attributes\n    for (var i = 0; i < this.PRESENTATIONAL_ATTRIBUTES.length; i++) {\n      e.removeAttribute(this.PRESENTATIONAL_ATTRIBUTES[i]);\n    }\n\n    if (this.DEPRECATED_SIZE_ATTRIBUTE_ELEMS.includes(e.tagName)) {\n      e.removeAttribute(\"width\");\n      e.removeAttribute(\"height\");\n    }\n\n    var cur = e.firstElementChild;\n    while (cur !== null) {\n      this._cleanStyles(cur);\n      cur = cur.nextElementSibling;\n    }\n  },\n\n  /**\n   * Get the density of links as a percentage of the content\n   * This is the amount of text that is inside a link divided by the total text in the node.\n   *\n   * @param Element\n   * @return number (float)\n   **/\n  _getLinkDensity(element) {\n    var textLength = this._getInnerText(element).length;\n    if (textLength === 0) {\n      return 0;\n    }\n\n    var linkLength = 0;\n\n    // XXX implement _reduceNodeList?\n    this._forEachNode(element.getElementsByTagName(\"a\"), function (linkNode) {\n      var href = linkNode.getAttribute(\"href\");\n      var coefficient = href && this.REGEXPS.hashUrl.test(href) ? 0.3 : 1;\n      linkLength += this._getInnerText(linkNode).length * coefficient;\n    });\n\n    return linkLength / textLength;\n  },\n\n  /**\n   * Get an elements class/id weight. Uses regular expressions to tell if this\n   * element looks good or bad.\n   *\n   * @param Element\n   * @return number (Integer)\n   **/\n  _getClassWeight(e) {\n    if (!this._flagIsActive(this.FLAG_WEIGHT_CLASSES)) {\n      return 0;\n    }\n\n    var weight = 0;\n\n    // Look for a special classname\n    if (typeof e.className === \"string\" && e.className !== \"\") {\n      if (this.REGEXPS.negative.test(e.className)) {\n        weight -= 25;\n      }\n\n      if (this.REGEXPS.positive.test(e.className)) {\n        weight += 25;\n      }\n    }\n\n    // Look for a special ID\n    if (typeof e.id === \"string\" && e.id !== \"\") {\n      if (this.REGEXPS.negative.test(e.id)) {\n        weight -= 25;\n      }\n\n      if (this.REGEXPS.positive.test(e.id)) {\n        weight += 25;\n      }\n    }\n\n    return weight;\n  },\n\n  /**\n   * Clean a node of all elements of type \"tag\".\n   * (Unless it's a youtube/vimeo video. People love movies.)\n   *\n   * @param Element\n   * @param string tag to clean\n   * @return void\n   **/\n  _clean(e, tag) {\n    var isEmbed = [\"object\", \"embed\", \"iframe\"].includes(tag);\n\n    this._removeNodes(this._getAllNodesWithTag(e, [tag]), function (element) {\n      // Allow youtube and vimeo videos through as people usually want to see those.\n      if (isEmbed) {\n        // First, check the elements attributes to see if any of them contain youtube or vimeo\n        for (var i = 0; i < element.attributes.length; i++) {\n          if (this._allowedVideoRegex.test(element.attributes[i].value)) {\n            return false;\n          }\n        }\n\n        // For embed with <object> tag, check inner HTML as well.\n        if (\n          element.tagName === \"object\" &&\n          this._allowedVideoRegex.test(element.innerHTML)\n        ) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  },\n\n  /**\n   * Check if a given node has one of its ancestor tag name matching the\n   * provided one.\n   * @param  HTMLElement node\n   * @param  String      tagName\n   * @param  Number      maxDepth\n   * @param  Function    filterFn a filter to invoke to determine whether this node 'counts'\n   * @return Boolean\n   */\n  _hasAncestorTag(node, tagName, maxDepth, filterFn) {\n    maxDepth = maxDepth || 3;\n    tagName = tagName.toUpperCase();\n    var depth = 0;\n    while (node.parentNode) {\n      if (maxDepth > 0 && depth > maxDepth) {\n        return false;\n      }\n      if (\n        node.parentNode.tagName === tagName &&\n        (!filterFn || filterFn(node.parentNode))\n      ) {\n        return true;\n      }\n      node = node.parentNode;\n      depth++;\n    }\n    return false;\n  },\n\n  /**\n   * Return an object indicating how many rows and columns this table has.\n   */\n  _getRowAndColumnCount(table) {\n    var rows = 0;\n    var columns = 0;\n    var trs = table.getElementsByTagName(\"tr\");\n    for (var i = 0; i < trs.length; i++) {\n      var rowspan = trs[i].getAttribute(\"rowspan\") || 0;\n      if (rowspan) {\n        rowspan = parseInt(rowspan, 10);\n      }\n      rows += rowspan || 1;\n\n      // Now look for column-related info\n      var columnsInThisRow = 0;\n      var cells = trs[i].getElementsByTagName(\"td\");\n      for (var j = 0; j < cells.length; j++) {\n        var colspan = cells[j].getAttribute(\"colspan\") || 0;\n        if (colspan) {\n          colspan = parseInt(colspan, 10);\n        }\n        columnsInThisRow += colspan || 1;\n      }\n      columns = Math.max(columns, columnsInThisRow);\n    }\n    return { rows, columns };\n  },\n\n  /**\n   * Look for 'data' (as opposed to 'layout') tables, for which we use\n   * similar checks as\n   * https://searchfox.org/mozilla-central/rev/f82d5c549f046cb64ce5602bfd894b7ae807c8f8/accessible/generic/TableAccessible.cpp#19\n   */\n  _markDataTables(root) {\n    var tables = root.getElementsByTagName(\"table\");\n    for (var i = 0; i < tables.length; i++) {\n      var table = tables[i];\n      var role = table.getAttribute(\"role\");\n      if (role == \"presentation\") {\n        table._readabilityDataTable = false;\n        continue;\n      }\n      var datatable = table.getAttribute(\"datatable\");\n      if (datatable == \"0\") {\n        table._readabilityDataTable = false;\n        continue;\n      }\n      var summary = table.getAttribute(\"summary\");\n      if (summary) {\n        table._readabilityDataTable = true;\n        continue;\n      }\n\n      var caption = table.getElementsByTagName(\"caption\")[0];\n      if (caption && caption.childNodes.length) {\n        table._readabilityDataTable = true;\n        continue;\n      }\n\n      // If the table has a descendant with any of these tags, consider a data table:\n      var dataTableDescendants = [\"col\", \"colgroup\", \"tfoot\", \"thead\", \"th\"];\n      var descendantExists = function (tag) {\n        return !!table.getElementsByTagName(tag)[0];\n      };\n      if (dataTableDescendants.some(descendantExists)) {\n        this.log(\"Data table because found data-y descendant\");\n        table._readabilityDataTable = true;\n        continue;\n      }\n\n      // Nested tables indicate a layout table:\n      if (table.getElementsByTagName(\"table\")[0]) {\n        table._readabilityDataTable = false;\n        continue;\n      }\n\n      var sizeInfo = this._getRowAndColumnCount(table);\n\n      if (sizeInfo.columns == 1 || sizeInfo.rows == 1) {\n        // single colum/row tables are commonly used for page layout purposes.\n        table._readabilityDataTable = false;\n        continue;\n      }\n\n      if (sizeInfo.rows >= 10 || sizeInfo.columns > 4) {\n        table._readabilityDataTable = true;\n        continue;\n      }\n      // Now just go by size entirely:\n      table._readabilityDataTable = sizeInfo.rows * sizeInfo.columns > 10;\n    }\n  },\n\n  /* convert images and figures that have properties like data-src into images that can be loaded without JS */\n  _fixLazyImages(root) {\n    this._forEachNode(\n      this._getAllNodesWithTag(root, [\"img\", \"picture\", \"figure\"]),\n      function (elem) {\n        // In some sites (e.g. Kotaku), they put 1px square image as base64 data uri in the src attribute.\n        // So, here we check if the data uri is too short, just might as well remove it.\n        if (elem.src && this.REGEXPS.b64DataUrl.test(elem.src)) {\n          // Make sure it's not SVG, because SVG can have a meaningful image in under 133 bytes.\n          var parts = this.REGEXPS.b64DataUrl.exec(elem.src);\n          if (parts[1] === \"image/svg+xml\") {\n            return;\n          }\n\n          // Make sure this element has other attributes which contains image.\n          // If it doesn't, then this src is important and shouldn't be removed.\n          var srcCouldBeRemoved = false;\n          for (var i = 0; i < elem.attributes.length; i++) {\n            var attr = elem.attributes[i];\n            if (attr.name === \"src\") {\n              continue;\n            }\n\n            if (/\\.(jpg|jpeg|png|webp)/i.test(attr.value)) {\n              srcCouldBeRemoved = true;\n              break;\n            }\n          }\n\n          // Here we assume if image is less than 100 bytes (or 133 after encoded to base64)\n          // it will be too small, therefore it might be placeholder image.\n          if (srcCouldBeRemoved) {\n            var b64starts = parts[0].length;\n            var b64length = elem.src.length - b64starts;\n            if (b64length < 133) {\n              elem.removeAttribute(\"src\");\n            }\n          }\n        }\n\n        // also check for \"null\" to work around https://github.com/jsdom/jsdom/issues/2580\n        if (\n          (elem.src || (elem.srcset && elem.srcset != \"null\")) &&\n          !elem.className.toLowerCase().includes(\"lazy\")\n        ) {\n          return;\n        }\n\n        for (var j = 0; j < elem.attributes.length; j++) {\n          attr = elem.attributes[j];\n          if (\n            attr.name === \"src\" ||\n            attr.name === \"srcset\" ||\n            attr.name === \"alt\"\n          ) {\n            continue;\n          }\n          var copyTo = null;\n          if (/\\.(jpg|jpeg|png|webp)\\s+\\d/.test(attr.value)) {\n            copyTo = \"srcset\";\n          } else if (/^\\s*\\S+\\.(jpg|jpeg|png|webp)\\S*\\s*$/.test(attr.value)) {\n            copyTo = \"src\";\n          }\n          if (copyTo) {\n            //if this is an img or picture, set the attribute directly\n            if (elem.tagName === \"IMG\" || elem.tagName === \"PICTURE\") {\n              elem.setAttribute(copyTo, attr.value);\n            } else if (\n              elem.tagName === \"FIGURE\" &&\n              !this._getAllNodesWithTag(elem, [\"img\", \"picture\"]).length\n            ) {\n              //if the item is a <figure> that does not contain an image or picture, create one and place it inside the figure\n              //see the nytimes-3 testcase for an example\n              var img = this._doc.createElement(\"img\");\n              img.setAttribute(copyTo, attr.value);\n              elem.appendChild(img);\n            }\n          }\n        }\n      }\n    );\n  },\n\n  _getTextDensity(e, tags) {\n    var textLength = this._getInnerText(e, true).length;\n    if (textLength === 0) {\n      return 0;\n    }\n    var childrenLength = 0;\n    var children = this._getAllNodesWithTag(e, tags);\n    this._forEachNode(\n      children,\n      child => (childrenLength += this._getInnerText(child, true).length)\n    );\n    return childrenLength / textLength;\n  },\n\n  /**\n   * Clean an element of all tags of type \"tag\" if they look fishy.\n   * \"Fishy\" is an algorithm based on content length, classnames, link density, number of images & embeds, etc.\n   *\n   * @return void\n   **/\n  _cleanConditionally(e, tag) {\n    if (!this._flagIsActive(this.FLAG_CLEAN_CONDITIONALLY)) {\n      return;\n    }\n\n    // Gather counts for other typical elements embedded within.\n    // Traverse backwards so we can remove nodes at the same time\n    // without effecting the traversal.\n    //\n    // TODO: Consider taking into account original contentScore here.\n    this._removeNodes(this._getAllNodesWithTag(e, [tag]), function (node) {\n      // First check if this node IS data table, in which case don't remove it.\n      var isDataTable = function (t) {\n        return t._readabilityDataTable;\n      };\n\n      var isList = tag === \"ul\" || tag === \"ol\";\n      if (!isList) {\n        var listLength = 0;\n        var listNodes = this._getAllNodesWithTag(node, [\"ul\", \"ol\"]);\n        this._forEachNode(\n          listNodes,\n          list => (listLength += this._getInnerText(list).length)\n        );\n        isList = listLength / this._getInnerText(node).length > 0.9;\n      }\n\n      if (tag === \"table\" && isDataTable(node)) {\n        return false;\n      }\n\n      // Next check if we're inside a data table, in which case don't remove it as well.\n      if (this._hasAncestorTag(node, \"table\", -1, isDataTable)) {\n        return false;\n      }\n\n      if (this._hasAncestorTag(node, \"code\")) {\n        return false;\n      }\n\n      // keep element if it has a data tables\n      if (\n        [...node.getElementsByTagName(\"table\")].some(\n          tbl => tbl._readabilityDataTable\n        )\n      ) {\n        return false;\n      }\n\n      var weight = this._getClassWeight(node);\n\n      this.log(\"Cleaning Conditionally\", node);\n\n      var contentScore = 0;\n\n      if (weight + contentScore < 0) {\n        return true;\n      }\n\n      if (this._getCharCount(node, \",\") < 10) {\n        // If there are not very many commas, and the number of\n        // non-paragraph elements is more than paragraphs or other\n        // ominous signs, remove the element.\n        var p = node.getElementsByTagName(\"p\").length;\n        var img = node.getElementsByTagName(\"img\").length;\n        var li = node.getElementsByTagName(\"li\").length - 100;\n        var input = node.getElementsByTagName(\"input\").length;\n        var headingDensity = this._getTextDensity(node, [\n          \"h1\",\n          \"h2\",\n          \"h3\",\n          \"h4\",\n          \"h5\",\n          \"h6\",\n        ]);\n\n        var embedCount = 0;\n        var embeds = this._getAllNodesWithTag(node, [\n          \"object\",\n          \"embed\",\n          \"iframe\",\n        ]);\n\n        for (var i = 0; i < embeds.length; i++) {\n          // If this embed has attribute that matches video regex, don't delete it.\n          for (var j = 0; j < embeds[i].attributes.length; j++) {\n            if (this._allowedVideoRegex.test(embeds[i].attributes[j].value)) {\n              return false;\n            }\n          }\n\n          // For embed with <object> tag, check inner HTML as well.\n          if (\n            embeds[i].tagName === \"object\" &&\n            this._allowedVideoRegex.test(embeds[i].innerHTML)\n          ) {\n            return false;\n          }\n\n          embedCount++;\n        }\n\n        var innerText = this._getInnerText(node);\n\n        // toss any node whose inner text contains nothing but suspicious words\n        if (\n          this.REGEXPS.adWords.test(innerText) ||\n          this.REGEXPS.loadingWords.test(innerText)\n        ) {\n          return true;\n        }\n\n        var contentLength = innerText.length;\n        var linkDensity = this._getLinkDensity(node);\n        var textishTags = [\"SPAN\", \"LI\", \"TD\"].concat(\n          Array.from(this.DIV_TO_P_ELEMS)\n        );\n        var textDensity = this._getTextDensity(node, textishTags);\n        var isFigureChild = this._hasAncestorTag(node, \"figure\");\n\n        // apply shadiness checks, then check for exceptions\n        const shouldRemoveNode = () => {\n          const errs = [];\n          if (!isFigureChild && img > 1 && p / img < 0.5) {\n            errs.push(`Bad p to img ratio (img=${img}, p=${p})`);\n          }\n          if (!isList && li > p) {\n            errs.push(`Too many li's outside of a list. (li=${li} > p=${p})`);\n          }\n          if (input > Math.floor(p / 3)) {\n            errs.push(`Too many inputs per p. (input=${input}, p=${p})`);\n          }\n          if (\n            !isList &&\n            !isFigureChild &&\n            headingDensity < 0.9 &&\n            contentLength < 25 &&\n            (img === 0 || img > 2) &&\n            linkDensity > 0\n          ) {\n            errs.push(\n              `Suspiciously short. (headingDensity=${headingDensity}, img=${img}, linkDensity=${linkDensity})`\n            );\n          }\n          if (\n            !isList &&\n            weight < 25 &&\n            linkDensity > 0.2 + this._linkDensityModifier\n          ) {\n            errs.push(\n              `Low weight and a little linky. (linkDensity=${linkDensity})`\n            );\n          }\n          if (weight >= 25 && linkDensity > 0.5 + this._linkDensityModifier) {\n            errs.push(\n              `High weight and mostly links. (linkDensity=${linkDensity})`\n            );\n          }\n          if ((embedCount === 1 && contentLength < 75) || embedCount > 1) {\n            errs.push(\n              `Suspicious embed. (embedCount=${embedCount}, contentLength=${contentLength})`\n            );\n          }\n          if (img === 0 && textDensity === 0) {\n            errs.push(\n              `No useful content. (img=${img}, textDensity=${textDensity})`\n            );\n          }\n\n          if (errs.length) {\n            this.log(\"Checks failed\", errs);\n            return true;\n          }\n\n          return false;\n        };\n\n        var haveToRemove = shouldRemoveNode();\n\n        // Allow simple lists of images to remain in pages\n        if (isList && haveToRemove) {\n          for (var x = 0; x < node.children.length; x++) {\n            let child = node.children[x];\n            // Don't filter in lists with li's that contain more than one child\n            if (child.children.length > 1) {\n              return haveToRemove;\n            }\n          }\n          let li_count = node.getElementsByTagName(\"li\").length;\n          // Only allow the list to remain if every li contains an image\n          if (img == li_count) {\n            return false;\n          }\n        }\n        return haveToRemove;\n      }\n      return false;\n    });\n  },\n\n  /**\n   * Clean out elements that match the specified conditions\n   *\n   * @param Element\n   * @param Function determines whether a node should be removed\n   * @return void\n   **/\n  _cleanMatchedNodes(e, filter) {\n    var endOfSearchMarkerNode = this._getNextNode(e, true);\n    var next = this._getNextNode(e);\n    while (next && next != endOfSearchMarkerNode) {\n      if (filter.call(this, next, next.className + \" \" + next.id)) {\n        next = this._removeAndGetNext(next);\n      } else {\n        next = this._getNextNode(next);\n      }\n    }\n  },\n\n  /**\n   * Clean out spurious headers from an Element.\n   *\n   * @param Element\n   * @return void\n   **/\n  _cleanHeaders(e) {\n    let headingNodes = this._getAllNodesWithTag(e, [\"h1\", \"h2\"]);\n    this._removeNodes(headingNodes, function (node) {\n      let shouldRemove = this._getClassWeight(node) < 0;\n      if (shouldRemove) {\n        this.log(\"Removing header with low class weight:\", node);\n      }\n      return shouldRemove;\n    });\n  },\n\n  /**\n   * Check if this node is an H1 or H2 element whose content is mostly\n   * the same as the article title.\n   *\n   * @param Element  the node to check.\n   * @return boolean indicating whether this is a title-like header.\n   */\n  _headerDuplicatesTitle(node) {\n    if (node.tagName != \"H1\" && node.tagName != \"H2\") {\n      return false;\n    }\n    var heading = this._getInnerText(node, false);\n    this.log(\"Evaluating similarity of header:\", heading, this._articleTitle);\n    return this._textSimilarity(this._articleTitle, heading) > 0.75;\n  },\n\n  _flagIsActive(flag) {\n    return (this._flags & flag) > 0;\n  },\n\n  _removeFlag(flag) {\n    this._flags = this._flags & ~flag;\n  },\n\n  _isProbablyVisible(node) {\n    // Have to null-check node.style and node.className.includes to deal with SVG and MathML nodes.\n    return (\n      (!node.style || node.style.display != \"none\") &&\n      (!node.style || node.style.visibility != \"hidden\") &&\n      !node.hasAttribute(\"hidden\") &&\n      //check for \"fallback-image\" so that wikimedia math images are displayed\n      (!node.hasAttribute(\"aria-hidden\") ||\n        node.getAttribute(\"aria-hidden\") != \"true\" ||\n        (node.className &&\n          node.className.includes &&\n          node.className.includes(\"fallback-image\")))\n    );\n  },\n\n  /**\n   * Runs readability.\n   *\n   * Workflow:\n   *  1. Prep the document by removing script tags, css, etc.\n   *  2. Build readability's DOM tree.\n   *  3. Grab the article content from the current dom tree.\n   *  4. Replace the current DOM tree with the new one.\n   *  5. Read peacefully.\n   *\n   * @return void\n   **/\n  parse() {\n    // Avoid parsing too large documents, as per configuration option\n    if (this._maxElemsToParse > 0) {\n      var numTags = this._doc.getElementsByTagName(\"*\").length;\n      if (numTags > this._maxElemsToParse) {\n        throw new Error(\n          \"Aborting parsing document; \" + numTags + \" elements found\"\n        );\n      }\n    }\n\n    // Unwrap image from noscript\n    this._unwrapNoscriptImages(this._doc);\n\n    // Extract JSON-LD metadata before removing scripts\n    var jsonLd = this._disableJSONLD ? {} : this._getJSONLD(this._doc);\n\n    // Remove script tags from the document.\n    this._removeScripts(this._doc);\n\n    this._prepDocument();\n\n    var metadata = this._getArticleMetadata(jsonLd);\n    this._metadata = metadata;\n    this._articleTitle = metadata.title;\n\n    var articleContent = this._grabArticle();\n    if (!articleContent) {\n      return null;\n    }\n\n    this.log(\"Grabbed: \" + articleContent.innerHTML);\n\n    this._postProcessContent(articleContent);\n\n    // If we haven't found an excerpt in the article's metadata, use the article's\n    // first paragraph as the excerpt. This is used for displaying a preview of\n    // the article's content.\n    if (!metadata.excerpt) {\n      var paragraphs = articleContent.getElementsByTagName(\"p\");\n      if (paragraphs.length) {\n        metadata.excerpt = paragraphs[0].textContent.trim();\n      }\n    }\n\n    var textContent = articleContent.textContent;\n    return {\n      title: this._articleTitle,\n      byline: metadata.byline || this._articleByline,\n      dir: this._articleDir,\n      lang: this._articleLang,\n      content: this._serializer(articleContent),\n      textContent,\n      length: textContent.length,\n      excerpt: metadata.excerpt,\n      siteName: metadata.siteName || this._articleSiteName,\n      publishedTime: metadata.publishedTime,\n    };\n  },\n};\n\nif (typeof module === \"object\") {\n  /* eslint-disable-next-line no-redeclare */\n  /* global module */\n  module.exports = Readability;\n}\n", "/*\n * Copyright (c) 2010 Arc90 Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * This code is heavily based on Arc90's readability.js (1.7.1) script\n * available at: http://code.google.com/p/arc90labs-readability\n */\n\nvar REGEXPS = {\n  // NOTE: These two regular expressions are duplicated in\n  // Readability.js. Please keep both copies in sync.\n  unlikelyCandidates:\n    /-ad-|ai2html|banner|breadcrumbs|combx|comment|community|cover-wrap|disqus|extra|footer|gdpr|header|legends|menu|related|remark|replies|rss|shoutbox|sidebar|skyscraper|social|sponsor|supplemental|ad-break|agegate|pagination|pager|popup|yom-remote/i,\n  okMaybeItsACandidate: /and|article|body|column|content|main|shadow/i,\n};\n\nfunction isNodeVisible(node) {\n  // Have to null-check node.style and node.className.includes to deal with SVG and MathML nodes.\n  return (\n    (!node.style || node.style.display != \"none\") &&\n    !node.hasAttribute(\"hidden\") &&\n    //check for \"fallback-image\" so that wikimedia math images are displayed\n    (!node.hasAttribute(\"aria-hidden\") ||\n      node.getAttribute(\"aria-hidden\") != \"true\" ||\n      (node.className &&\n        node.className.includes &&\n        node.className.includes(\"fallback-image\")))\n  );\n}\n\n/**\n * Decides whether or not the document is reader-able without parsing the whole thing.\n * @param {Object} options Configuration object.\n * @param {number} [options.minContentLength=140] The minimum node content length used to decide if the document is readerable.\n * @param {number} [options.minScore=20] The minumum cumulated 'score' used to determine if the document is readerable.\n * @param {Function} [options.visibilityChecker=isNodeVisible] The function used to determine if a node is visible.\n * @return {boolean} Whether or not we suspect Readability.parse() will suceeed at returning an article object.\n */\nfunction isProbablyReaderable(doc, options = {}) {\n  // For backward compatibility reasons 'options' can either be a configuration object or the function used\n  // to determine if a node is visible.\n  if (typeof options == \"function\") {\n    options = { visibilityChecker: options };\n  }\n\n  var defaultOptions = {\n    minScore: 20,\n    minContentLength: 140,\n    visibilityChecker: isNodeVisible,\n  };\n  options = Object.assign(defaultOptions, options);\n\n  var nodes = doc.querySelectorAll(\"p, pre, article\");\n\n  // Get <div> nodes which have <br> node(s) and append them into the `nodes` variable.\n  // Some articles' DOM structures might look like\n  // <div>\n  //   Sentences<br>\n  //   <br>\n  //   Sentences<br>\n  // </div>\n  var brNodes = doc.querySelectorAll(\"div > br\");\n  if (brNodes.length) {\n    var set = new Set(nodes);\n    [].forEach.call(brNodes, function (node) {\n      set.add(node.parentNode);\n    });\n    nodes = Array.from(set);\n  }\n\n  var score = 0;\n  // This is a little cheeky, we use the accumulator 'score' to decide what to return from\n  // this callback:\n  return [].some.call(nodes, function (node) {\n    if (!options.visibilityChecker(node)) {\n      return false;\n    }\n\n    var matchString = node.className + \" \" + node.id;\n    if (\n      REGEXPS.unlikelyCandidates.test(matchString) &&\n      !REGEXPS.okMaybeItsACandidate.test(matchString)\n    ) {\n      return false;\n    }\n\n    if (node.matches(\"li p\")) {\n      return false;\n    }\n\n    var textContentLength = node.textContent.trim().length;\n    if (textContentLength < options.minContentLength) {\n      return false;\n    }\n\n    score += Math.sqrt(textContentLength - options.minContentLength);\n\n    if (score > options.minScore) {\n      return true;\n    }\n    return false;\n  });\n}\n\nif (typeof module === \"object\") {\n  /* eslint-disable-next-line no-redeclare */\n  /* global module */\n  module.exports = isProbablyReaderable;\n}\n", "/* eslint-env node */\nvar Readability = require(\"./Readability\");\nvar isProbablyReaderable = require(\"./Readability-readerable\");\n\nmodule.exports = {\n  Readability,\n  isProbablyReaderable,\n};\n"],
  "mappings": "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",
  "names": ["ancestors"]
}
